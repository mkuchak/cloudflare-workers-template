generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             String           @id
  email          String           @unique
  password       String
  name           String?
  picture        String?
  isEmailVerified  Boolean          @default(false)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  UserToken      UserToken[]
  RoleUser       RoleUser[]
  PermissionUser PermissionUser[]
}

model UserToken {
  id             String    @id
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  token          String    @unique
  code           String?
  codeAttempts   Int?
  userAgent      String?
  lastIp         String?
  asn            Int?
  asOrganization String?
  timezone       String?
  continent      String?
  country        String?
  region         String?
  regionCode     String?
  city           String?
  postalCode     String?
  longitude      String?
  latitude       String?
  isEmailToken   Boolean   @default(false)
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
}

model RoleUser {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id             String           @id
  label          String           @unique
  title          String?
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  RoleUser       RoleUser[]
  PermissionRole PermissionRole[]
}

model PermissionRole {
  id           String     @id
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model PermissionUser {
  id           String     @id
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model Permission {
  id             String           @id
  label          String           @unique
  title          String?
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  PermissionRole PermissionRole[]
  PermissionUser PermissionUser[]
}
